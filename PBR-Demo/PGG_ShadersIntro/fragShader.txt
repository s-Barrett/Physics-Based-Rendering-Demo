#version 430 core
// This is the fragment shader
// The program in this file will be run separately for each fragment (pixel) that is drawn

// These are the per-fragment inputs
// They must match with the outputs of the vertex shader
in vec3 eyeSpaceNormalV;
in vec3 eyeSpaceLightPosV;
in vec3 eyeSpaceVertPosV;


// These variables will be the same for every vertex in the model
// They are mostly material and light properties
// We provide default values in case the program doesn't set them
uniform vec3 lightColour = {1,1,1};
uniform vec3 emissiveColour = {0,0,0};
uniform vec3 ambientColour  = {0.1f,0.1f,0.2f};
uniform vec3 specularColour = {0.0f,1.0f,0.0f};
uniform float shininess     = 50.0f;
uniform float alpha         = 1.0f;
uniform vec3 cameraPosition;

//metrial properties
uniform vec3 albedo = {0.8f,0.1f,0.1f};
uniform float metallic = 0;
uniform float roughness = 0.2;
uniform float ao = 0.7;


uniform float exposure = 0.7;
// This is the output, it is the fragment's (pixel's) colour
out vec4 fragColour;


const float PI = 3.14159265359;
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
// ----------------------------------------------------------------------------




// The actual program, which will run on the graphics card
void main()
{
	// This is the direction from the fragment to the light, in eye-space
	vec3 lightDir = normalize( eyeSpaceLightPosV - eyeSpaceVertPosV );
	// Re-normalise the normal just in case
	vec3 normal = normalize( eyeSpaceNormalV );
	vec3 eyeDir = normalize( -eyeSpaceVertPosV );
	vec3 halfVec = normalize( lightDir + eyeDir );

	vec3 N = normal;
	vec3 V = eyeDir;
	vec3 R = reflect( -V, N );

	vec3 F0 = vec3(0.04); 
    F0 = mix(F0, albedo, metallic);

	vec3 Lo = vec3(0.0);
    for(int i = 0; i < 4; ++i)
	{
	 vec3 L = normalize(eyeSpaceLightPosV - eyeSpaceVertPosV);
	 vec3 H = normalize(V + L);
	 float distance = length(eyeSpaceLightPosV - eyeSpaceVertPosV);
	 float attenuation = 1.0 / (distance * distance);
	 vec3 radiance = lightColour * attenuation;

	 float NDF = DistributionGGX(N, H, roughness);
	 float G = GeometrySmith(N, V, L, roughness);
	 vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);

     vec3 nominator = NDF * G * F; 
     float denominator = 4.0 * max(dot(V, N), 0.0) * max(dot(L, N), 0.0) + 0.001f; 
     vec3 brdf = nominator / denominator;

	// kS is equal to Fresnel
        vec3 kS = F;
   
        vec3 kD = vec3(1.0) - kS;

        kD *= 1.0 - metallic;	  

        float NdotL = max(dot(N, L), 0.0);        

        Lo += (kD * albedo / PI + brdf) * radiance * NdotL;
	}

    vec3 ambient = vec3(1.0) * albedo * ao;

    vec3 color = ambient + Lo;

    color = color / (color + vec3(1.0));

    color = pow(color, vec3(1.0/exposure)); 

    fragColour = vec4(color, 1.0);
}
